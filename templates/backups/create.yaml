# Copyright (c) 2024-2025 Hopsworks AB. All rights reserved.

{{ if include "rondb.backups.isEnabled" . -}}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: create-backup
  namespace: {{ .Release.Namespace }}
spec:
  schedule: {{ include "rondb.backups.schedule" . | quote}}
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            rondbService: {{ include "rondb.labels.rondbService.create-backup" $ }}
        spec:
{{- include "rondb.PodSecurityContext" $ | indent 10 }}
{{- include "rondb.nodeSelector" (dict "nodeSelector" $.Values.nodeSelector.backup) | indent 10 }}
{{- include "rondb.tolerations" (dict "tolerations" $.Values.tolerations.backup) | indent 10 }}
          serviceAccountName: rondb-backups-sa
          restartPolicy: OnFailure
          initContainers:
{{ include "rondb.apiInitContainer" . | indent 10 }}
          - name: backup-metadata
            image: {{ include "image_address" (dict "image" $.Values.images.toolbox) }}
            imagePullPolicy: {{ $.Values.imagePullPolicy }}
            command:
            - /bin/bash
            - -c
            - |
{{ tpl (.Files.Get "files/scripts/backups/metadata_upload_kubectl.sh") . | indent 14 }}
            env:
            - name: MYSQLD_PODNAME
              value: {{ include "rondb.mysqldPodname" . }}
            # On MySQLd Pod:
            - name: REMOTE_BACKUP_DIR
              value: /tmp/backup
            - name: LOCAL_BACKUP_DIR
              value: /home/hopsworks/schemata
            # This will be read by rclone
            - name: RCLONE_CONFIG
              value: /home/hopsworks/rclone.conf
{{- include "rondb.backup.credentials" (dict "backupConfig" $.Values.backups "namespace" $.Release.Namespace "global" $.Values.global) | indent 12 }}
            volumeMounts:
            - name: rclone-configs
              mountPath: /home/hopsworks/rclone.conf
              subPath: rclone.conf
            - name: backup-id
              mountPath: /home/hopsworks/backup-id
          # RonDB contains a native backup protocol, which is launched through
          # the mgm client. It essentially causes every datanode to create a binary
          # backup that it stores locally.
          - name: run-native-backup
            image: {{ include "image_address" (dict "image" .Values.images.rondb) }}
            imagePullPolicy: {{ $.Values.imagePullPolicy }}
            command:
            - /bin/bash
            - -c
            - |
{{- include "rondb.backups.defineBackupIdEnv" $ | indent 14 }}
              ndb_mgm --ndb-connectstring=$MGM_CONNECTSTRING -e "START BACKUP $BACKUP_ID SNAPSHOTEND WAIT COMPLETED"
            env:
            - name: MGM_CONNECTSTRING
              value: {{ include "rondb.mgmdHostname" . }}:1186
            volumeMounts:
            - name: backup-id
              mountPath: /home/hopsworks/backup-id
              readOnly: true
          containers:
          - name: upload-native-backups
            image: {{ include "image_address" (dict "image" $.Values.images.toolbox) }}
            imagePullPolicy: {{ $.Values.imagePullPolicy }}
            workingDir: /home/hopsworks
            command:
            - /bin/bash
            - -c
            - |
{{ tpl (.Files.Get "files/scripts/backups/native_upload_kubectl.sh") . | indent 14 }}
            volumeMounts:
            - name: backup-id
              mountPath: /home/hopsworks/backup-id
              readOnly: true
          volumes:
          - name: rclone-configs
            configMap:
              name: rclone-configs
          - name: backup-id
            emptyDir: {}
---
{{- end -}}
