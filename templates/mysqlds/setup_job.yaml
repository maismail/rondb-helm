# Copyright (c) 2024-2025 Hopsworks AB. All rights reserved.

{{/*
    This Job initializes all MySQL metadata. This means downloading metadata from
    the backup (if available), and applying it. It also means running the SQL init
    scripts, if any are provided by the Helm user. The Job will wait for the
    native restore-backup Job to have completed, if the user has provided a backup ID.
*/}}
{{- if .Release.IsInstall }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "rondb.mysqldSetupJobName" . }}
  namespace: {{ .Release.Namespace }}
spec:
  backoffLimit: 0
  parallelism: 1
  template:
    metadata:
      labels:
        rondbService: {{ include "rondb.labels.rondbService.setup-mysqld" $ }}
    spec:
      restartPolicy: Never
{{- if .Values.restoreFromBackup.backupId }}
      serviceAccountName: {{ include "rondb.serviceAccount.restoreWatcher" . }}
{{- end }}
{{- include "rondb.PodSecurityContext" $ | indent 6 }}
{{- include "rondb.imagePullSecrets" . | indent 6 }}
{{- include "rondb.nodeSelector" (dict "nodeSelector" $.Values.nodeSelector.mysqld) | indent 6 }}
{{- include "rondb.tolerations" (dict "tolerations" $.Values.tolerations.mysqld) | indent 6 }}
{{- if .Values.priorityClass }}
      priorityClassName: {{ .Values.priorityClass | quote }}
{{- end  }}
      initContainers:
{{- if .Values.restoreFromBackup.backupId }}
      - name: download-mysql-metadata
        image: {{ include "image_address" (dict "image" $.Values.images.toolbox) }}
        imagePullPolicy: {{ $.Values.imagePullPolicy }}
        workingDir: /home/hopsworks
        command:
        - /bin/bash
        - -c
        - |
          set -e


{{- if eq $.Values.restoreFromBackup.objectStorageProvider "s3" }}
          REMOTE_BACKUP_DIR={{ include "rondb.rcloneRestoreRemoteName" . }}:{{ $.Values.restoreFromBackup.s3.bucketName }}/{{ include "rondb.restoreBackupPathPrefix" . }}/$BACKUP_ID
{{- end }}
          rclone copy --include "*.sql" $REMOTE_BACKUP_DIR/ $LOCAL_BACKUP_DIR/

          (set -x; ls -la $LOCAL_BACKUP_DIR)
          echo "Successfully downloaded MySQL metadata"
        env:
        # This will be read by rclone
        - name: RCLONE_CONFIG
          value: /home/hopsworks/rclone.conf
{{- include "rondb.backup.credentials" (dict "backupConfig" $.Values.restoreFromBackup "namespace" $.Release.Namespace "global" $.Values.global) | indent 8 }}
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: BACKUP_ID
          value: {{ .Values.restoreFromBackup.backupId | int | quote }}
        - name: LOCAL_BACKUP_DIR
          value: &metadataBackupDir /home/hopsworks/schemata
        volumeMounts:
        - name: rclone-configs
          mountPath: /home/hopsworks/rclone.conf
          subPath: rclone.conf
        - name: mysql-restore
          mountPath: *metadataBackupDir
        resources:
          limits:
            cpu: 1
            memory: 200Mi
{{- end }}
{{/* 
    Always wait for data nodes first so that wait-for-restore-timeout is more accurate.
    Downloading the native backups happens in the data node Pods before the ndbmtds start up.
*/}}
{{ include "rondb.container.waitDatanodes" $ | indent 6 }}
{{ include "rondb.container.waitRestore" $ | indent 6 }}
{{/* 
    Very important that binlog servers do not miss any binlog events.
*/}}
{{ include "rondb.container.waitOneBinlogServer" $ | indent 6 }}
      containers:
{{/*
    Spawning up a MySQLd without network access, initializing the data directory,
    and running all init scripts.
*/}}
      - name: initialize-mysqld
        image: {{ include "image_address" (dict "image" .Values.images.rondb) }}
        imagePullPolicy: {{ $.Values.imagePullPolicy }}
{{ include "rondb.ContainerSecurityContext" $ | indent 8 }}
        command:
        - /bin/bash
        - -c
        - |
{{ tpl (.Files.Get "files/scripts/mysqld_single_setup.sh") . | indent 10 }}
        volumeMounts:
        - name: mysqld-configs
          # Using "raw", so that we can sed NodeIds into the file
          mountPath: {{ include "rondb.dataDir" $ }}/my-raw.cnf
          subPath: my.cnf
{{- if .Values.mysql.sqlInitContent }}
        - name: sql-init-script
          mountPath: {{ include "rondb.sqlInitScriptsDir" . }}/{{ include "rondb.helmSqlInitFile" . }}
          subPath: {{ include "rondb.helmSqlInitFile" . }}
{{- end }}
{{- if .Values.restoreFromBackup.backupId }}
        # The mount path must be unique; so we cannot mount it directly into the SQL-init directory
        - name: mysql-restore
          mountPath: {{ include "rondb.sqlRestoreScriptsDir" . }}
{{- end }}
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $.Values.mysql.credentialsSecretName }}
              key: root
{{- range $.Values.mysql.users }}
        - name: {{ include "rondb.mysql.getPasswordEnvVarName" . }}
          valueFrom:
            secretKeyRef:
              name: {{ $.Values.mysql.credentialsSecretName }}
              key: {{ .username }}
{{- end }}
        - name: MYSQL_CLUSTER_USER
          value: {{ .Values.mysql.clusterUser }}
        - name: MYSQL_CLUSTER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $.Values.mysql.credentialsSecretName }}
              key: {{ .Values.mysql.clusterUser }}
{{- if .Values.mysql.exporter.enabled }}
        - name: MYSQL_EXPORTER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $.Values.mysql.credentialsSecretName }}
              key: {{ .Values.mysql.exporter.username }}
{{- end}}
        resources:
          limits:
            cpu: {{ .Values.resources.limits.cpus.mysqlds }}
            memory: {{ .Values.resources.limits.memory.mysqldMiB }}Mi
          requests:
            cpu: {{ .Values.resources.requests.cpus.mysqlds }}
            memory: {{ .Values.resources.requests.memory.mysqldMiB }}Mi
      volumes:
      - name: mysqld-configs
        configMap:
          name: mysqld-configs
{{- if .Values.restoreFromBackup.backupId }}
      - name: rclone-configs
        configMap:
          name: rclone-configs
{{- end }}
{{- if .Values.restoreFromBackup.backupId }}
      - name: mysql-restore
        emptyDir:
          sizeLimit: 100Mi
{{- end }}
{{- if .Values.mysql.sqlInitContent }}
      - name: sql-init-script
        configMap:
          name: sql-init-script
{{- end }}
{{- end }}
---
{{ if .Values.mysql.sqlInitContent }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: sql-init-script
  namespace: {{ .Release.Namespace }}
data:
    {{ include "rondb.helmSqlInitFile" . }}: |
{{ include "rondb.sqlInitContent" . | indent 6 }}
---
{{ end }}
