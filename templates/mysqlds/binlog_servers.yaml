# Copyright (c) 2024-2025 Hopsworks AB. All rights reserved.

{{ if .Values.globalReplication.primary.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.Values.meta.binlogServers.statefulSet.name }}
  namespace: {{ $.Release.Namespace }}
spec:
  serviceName: {{ $.Values.meta.binlogServers.headlessClusterIp.name }}
  replicas: {{ $.Values.globalReplication.primary.numBinlogServers }}
  podManagementPolicy: Parallel
  # Avoid deleting all pods at once and creating binlog gaps
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      rondbService: {{ include "rondb.labels.rondbService.binlog-servers" $ }}
  volumeClaimTemplates:
    # Persisting data dir and binlog dir
    - metadata:
        name: mysql-data-dir
      spec:
        accessModes: [ReadWriteOnce]
{{- include "rondb.storageClass.binlogs" $ | indent 8 }}
        resources:
          requests:
            storage: {{ $.Values.resources.requests.storage.binlogGiB }}
  # Still in beta mode (Jan 2024)
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Delete
    whenScaled: Retain
  template:
    metadata:
      # Used to apply labels to all pods created by the Deployment
      labels:
        rondbService: {{ include "rondb.labels.rondbService.binlog-servers" $ }}
      annotations:
        configIniHash: {{ include "rondb.configIniHash" $ }}
    spec:
{{- include "rondb.imagePullSecrets" . | indent 6 }}
      affinity:
        # Spread the pods across different nodes & zones
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          # Preferred on different node
          - weight: 80
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: rondbService
                  operator: In
                  values:
                  - {{ include "rondb.labels.rondbService.binlog-servers" $ }}
              topologyKey: kubernetes.io/hostname
          # Preferred in different zone for HA
          - weight: 80
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: rondbService
                  operator: In
                  values:
                  - {{ include "rondb.labels.rondbService.binlog-servers" $ }}
              topologyKey: topology.kubernetes.io/zone
{{ include "rondb.PodSecurityContext" $ | indent 6 }}
{{- if .Values.priorityClass }}
      priorityClassName: {{ .Values.priorityClass | quote }}
{{- end  }}
{{- if include "rondb.restoreFromBackup.backupId" . }}
      # We need to wait for the restore Job
      serviceAccountName: {{ include "rondb.serviceAccount.restoreWatcher" . }}
{{- end }}
      initContainers:
      - name: mysqld-init-datadir
        image: {{ include "image_address" (dict "image" .Values.images.rondb) }}
        command:
        - /bin/bash
        - -c
        - |
          set -e

          DATA_DIR={{ include "rondb.mysqld.binlogServers.dataDir" $ | quote}}
          BINLOG_DIR={{ include "rondb.mysqld.binlogServers.binlogDir" $ | quote}}
          mkdir -p $DATA_DIR $BINLOG_DIR
          (
            set -x
            ls -l $DATA_DIR
            ls -l $BINLOG_DIR
          )

          if [ "$(ls -A $DATA_DIR)" ]; then
            echo "MySQLd data directory '${DATA_DIR}' is not empty. Skipping initialization."
            exit 0
          fi

{{- $startingNodeId := add 67 (mul $.Values.clusterSize.maxNumMySQLServers $.Values.rondbConfig.MySQLdSlotsPerNode) }}

{{- $maxTotalMySQLds := (include "rondb.maxTotalMySQLds" $ | int) }}
{{- $clusterServerIdOffset := (mul $.Values.globalReplication.clusterNumber $maxTotalMySQLds) | int -}}
{{- $startingServerId := (add $clusterServerIdOffset $.Values.clusterSize.maxNumMySQLServers 1) | int }}
{{- $serverIds := list -}}
{{ range $i := until ($.Values.globalReplication.primary.maxNumBinlogServers | int) -}}
{{- $serverId := (add $startingServerId $i) }}
{{- $serverIds = append $serverIds (printf "%d" $serverId) -}}
{{- end }}

{{ tpl (.Files.Get "files/scripts/mysqld_init.sh") (deepCopy $ | mustMerge (dict
    "startingNodeId" $startingNodeId
    "connectionsPerMySQLd" 1
    "globalServerIds" $serverIds
)) | indent 10 }}
          # TODO: Try to move over the created my.cnf file to the main container
        env:
          # This is actually already baked into the image
          - name: RONDB_DATA_DIR
            value: {{ include "rondb.dataDir" $ }}
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        volumeMounts:
        - name: mysqld-configs
          # Using "raw", so that we can sed NodeIds into the file
          mountPath: {{ include "rondb.dataDir" $ }}/my-raw.cnf
          subPath: my-binlog-servers.cnf
        - name: mysql-data-dir
          mountPath: {{ include "rondb.mysqldDataDir" . }}
{{/*
    Always wait for data nodes first so that timeouts are more accurate.
*/}}
{{ include "rondb.container.waitDatanodes" $ | indent 6 }}
{{/*
    It is always safer to not have any MySQLds running when restoring from backup.
*/}}
{{ include "rondb.container.waitRestore" $ | indent 6 }}
{{ include "rondb.container.isDnsResolvable" $ | indent 6 }}
      containers:
      - name: binlog-server
        image: {{ include "image_address" (dict "image" .Values.images.rondb) }}
        imagePullPolicy: {{ $.Values.imagePullPolicy }}
        command:
        - /bin/bash
        - -c
        - |
          set -e

          (
            set -x
            ls -l {{ include "rondb.mysqld.binlogServers.binlogDir" $ }}
          )

{{ include "rondb.sedMyCnfFile" (dict 
    "startingNodeId" $startingNodeId
    "connectionsPerMySQLd" 1
    "globalServerIds" $serverIds
) | indent 10 }}

          mysqld --defaults-file=$RONDB_DATA_DIR/my.cnf
        ports:
          - containerPort: 3306
        resources:
          limits:
            cpu: {{ .Values.resources.limits.cpus.mysqlds }}
            memory: {{ .Values.resources.limits.memory.mysqldMiB }}Mi
          requests:
            cpu: {{ .Values.resources.requests.cpus.mysqlds }}
            memory: {{ .Values.resources.requests.memory.mysqldMiB }}Mi
        env:
          # This is actually already baked into the image
          - name: RONDB_DATA_DIR
            value: {{ include "rondb.dataDir" $ }}
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ $.Values.mysql.credentialsSecretName }}
                key: root
          - name: MYSQL_CLUSTER_USER
            value: {{ .Values.mysql.clusterUser }}
          - name: MYSQL_CLUSTER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ $.Values.mysql.credentialsSecretName }}
                key: {{ $.Values.mysql.clusterUser }}
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        startupProbe:
{{ include "rondb.mysqld.selectProbe" (dict "isStartup" true) | indent 10 }}
        livenessProbe:
{{ include "rondb.mysqld.adminProbe" (dict "tls" $.Values.meta.binlogServers.statefulSet.endToEndTls) | indent 10 }}
        # This acts as a heartbeat, which can also be used by the replica applier to monitor
        # the replication channel
        # This will fail until the setubJob has set up MySQL passwords
        # IMPORTANT: Since we actually write data here, it's important that the binlog server is running first.
        #            All the more reason for the startupProbe to exist.
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              set -e
              {{ include "rondb.define_MYSQLD_NR" . | indent 14 }}

              {{ include "rondb.define_SERVER_ID" (dict "globalServerIds" $serverIds) | indent 14 }}

              mysql \
                --defaults-file=$RONDB_DATA_DIR/my.cnf \
                -e "UPDATE {{ include "rondb.databases.heartbeat" . }}.{{ include "rondb.tables.heartbeat" . }} SET counter = counter + 1  WHERE server_id=${SERVER_ID};"
          initialDelaySeconds: 5
          failureThreshold: 4
          periodSeconds: 2
          timeoutSeconds: 2
        securityContext:
          capabilities:
            add:
              - SYS_NICE
        volumeMounts:
        # Only mount single file, otherwise entire directory becomes read-only
        - name: mysqld-configs
          # Using "raw", so that we can sed NodeIds into the file
          mountPath: {{ include "rondb.dataDir" $ }}/my-raw.cnf
          subPath: my-binlog-servers.cnf
        - name: mysql-data-dir
          mountPath: {{ include "rondb.mysqldDataDir" . }}
      # StatefulSets work with PVCs to create a dedicated persistent volume for
      # each pod replica, ensuring that a pod always re-attaches to the same data
      # even if it is rescheduled to a different node.
{{- if $.Values.meta.binlogServers.statefulSet.endToEndTls.enabled }}
        - name: tls-certificates
          mountPath: /etc/tls
          readOnly: true
{{- end }}
      volumes:
      - name: mysqld-configs
        configMap:
          name: mysqld-configs
          defaultMode: 0777
{{- if $.Values.meta.binlogServers.statefulSet.endToEndTls.enabled }}
      # This will be created by the cert-manager via the Certificate CRD
      # The MySQLd will therefore not start until the certificate is available
      - name: tls-certificates
        secret:
          secretName: {{ $.Values.meta.binlogServers.statefulSet.endToEndTls.secretName }}
          optional: false
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.meta.binlogServers.headlessClusterIp.name }}
  namespace: {{ .Release.Namespace }}
spec:
  # Headless service for individual DNS records for the pods
  clusterIP: None
  # So we do not rely on the readiness probe to connect to the MGMd
  publishNotReadyAddresses: true
  # Match the spec.template.metadata.labels of the StatefulSet
  selector:
    rondbService: {{ include "rondb.labels.rondbService.binlog-servers" $ }}
  ports:
    - protocol: TCP
      port: {{ .Values.meta.binlogServers.headlessClusterIp.port }}
      targetPort: 3306
{{- range $i := until ($.Values.globalReplication.primary.numBinlogServers | int) }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $.Values.meta.binlogServers.externalLoadBalancers.namePrefix }}-{{ $i }}
  namespace: {{ $.Release.Namespace }}
  labels:
    app: {{ $.Chart.Name }}
  annotations:
{{- range $k, $v := $.Values.meta.binlogServers.externalLoadBalancers.annotations }}
    {{ $k }}: {{ $v | quote }}
{{- end }}
spec:
  type: LoadBalancer
{{- if $.Values.meta.binlogServers.externalLoadBalancers.class }}
  loadBalancerClass: {{ $.Values.meta.binlogServers.externalLoadBalancers.class }}
{{- end }}
  selector:
    rondbService: {{ include "rondb.labels.rondbService.binlog-servers" $ }}
    statefulset.kubernetes.io/pod-name: {{ $.Values.meta.binlogServers.statefulSet.name }}-{{ $i }}
  ports:
    - protocol: TCP
      port: {{ $.Values.meta.binlogServers.externalLoadBalancers.port }}
      targetPort: 3306
{{- end }}
{{- end }}
